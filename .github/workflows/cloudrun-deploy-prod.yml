name: Deploy to Cloud Run - Production

on:
  push:
    tags:
      - 'v*'
    paths:
      - 'src/**'
      - 'package.json'
      - 'Dockerfile'
      - 'cloudbuild.yaml'
      - '.github/workflows/**'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID || 'fila-digital-qa' }}
  GCP_REGION: ${{ secrets.GCP_REGION || 'us-central1' }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME || 'fila-frontend' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Version check
        id: version_check
        run: |
          if [ -f "package.json" ]; then
            VERSION=$(node -p "require('./package.json').version")
            echo "Current version: $VERSION"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "No package.json found, skipping deploy"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Google Cloud CLI
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          echo "🔧 Configurando Google Cloud CLI..."
          curl -sSL https://sdk.cloud.google.com | bash
          echo "$HOME/google-cloud-sdk/bin" >> $GITHUB_PATH
          echo "$HOME/google-cloud-sdk/bin/gcloud" >> $GITHUB_PATH
          echo "$HOME/google-cloud-sdk/bin/docker-credential-gcloud" >> $GITHUB_PATH

      - name: Authenticate with Service Account
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          echo "🔐 Autenticando com conta de serviço..."
          
          # Salvar a chave em arquivo temporário
          echo '${{ secrets.GCP_SA_KEY_PROD }}' > /tmp/service-account-key.json
          
          # Verificar se o arquivo foi criado corretamente
          echo "📁 Verificando arquivo da chave:"
          ls -la /tmp/service-account-key.json
          echo "📄 Primeiras linhas da chave:"
          head -5 /tmp/service-account-key.json
          
          # Ativar a conta de serviço
          gcloud auth activate-service-account --key-file=/tmp/service-account-key.json
          
          # Configurar projeto
          gcloud config set project $GCP_PROJECT_ID
          
          # Verificar autenticação
          echo "✅ Conta ativa:"
          gcloud auth list
          
          # Verificar projeto configurado
          echo "✅ Projeto configurado:"
          gcloud config get-value project

      - name: Configure Docker
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          echo "🐳 Configurando Docker..."
          
          # Configurar Docker para Artifact Registry
          gcloud auth configure-docker us-docker.pkg.dev
          
          # Verificar configuração do Docker
          echo "✅ Configuração do Docker:"
          cat ~/.docker/config.json

      - name: Build and push Docker image
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          echo "🏗️ Construindo e enviando imagem Docker..."
          
          # Definir variáveis
          VERSION="${{ github.sha }}"
          IMAGE_PATH="us-docker.pkg.dev/$GCP_PROJECT_ID/fila-frontend/fila-frontend"
          
          echo "📦 Versão: $VERSION"
          echo "🖼️ Caminho da imagem: $IMAGE_PATH"
          
          # Construir imagem
          docker build -t $IMAGE_PATH:$VERSION .
          docker build -t $IMAGE_PATH:latest .
          
          # Enviar imagens
          docker push $IMAGE_PATH:$VERSION
          docker push $IMAGE_PATH:latest
          
          echo "✅ Imagens enviadas com sucesso!"

      - name: Deploy to Cloud Run
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          echo "🚀 Fazendo deploy para Cloud Run..."
          
          # Definir variáveis
          VERSION="${{ github.sha }}"
          IMAGE_PATH="us-docker.pkg.dev/$GCP_PROJECT_ID/fila-frontend/fila-frontend"
          
          # Verificar se o serviço existe
          if gcloud run services describe $SERVICE_NAME --region=$GCP_REGION --format="value(metadata.name)" 2>/dev/null; then
            echo "🔄 Atualizando serviço existente..."
            gcloud run services replace-traffic $SERVICE_NAME \
              --to-latest \
              --region=$GCP_REGION
          else
            echo "🆕 Criando novo serviço..."
            gcloud run deploy $SERVICE_NAME \
              --image=$IMAGE_PATH:latest \
              --region=$GCP_REGION \
              --platform=managed \
              --allow-unauthenticated \
              --port=3000 \
              --memory=512Mi \
              --cpu=1 \
              --max-instances=10
          fi
          
          echo "✅ Deploy concluído!"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Limpando arquivos temporários..."
          rm -f /tmp/service-account-key.json
          echo "✅ Limpeza concluída!"
