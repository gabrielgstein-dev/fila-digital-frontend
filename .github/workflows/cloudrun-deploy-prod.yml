name: Deploy Frontend to Cloud Run (Production)

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Apenas tags sem sufixo (ex: 1.2.3)
  workflow_dispatch:
    inputs:
      tag:
        description: 'Production tag to deploy (without -stage suffix)'
        required: true
        default: '1.0.0'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_PROD }}
  GCP_REGION: ${{ vars.GCP_REGION_PROD }}
  SERVICE_NAME: ${{ vars.FRONTEND_SERVICE_NAME_PROD }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production  # Requer aprova√ß√£o/permiss√£o
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version_check
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          # Extract version from tag
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Tag detectada: $TAG_NAME"
          
          # Validar que N√ÉO cont√©m -stage e segue formato X.Y.Z
          if [[ "$TAG_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "‚úÖ Deploy de PRODU√á√ÉO ser√° executado para vers√£o: $TAG_NAME"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Tag n√£o √© v√°lida para produ√ß√£o (deve ser X.Y.Z sem sufixo)"
          fi
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual dispatch
          TAG_NAME="${{ github.event.inputs.tag }}"
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Deploy manual de PRODU√á√ÉO para vers√£o: $TAG_NAME"
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
          echo "‚ùå Evento n√£o suportado para deploy de produ√ß√£o"
        fi

    - name: Setup Google Cloud CLI
      if: steps.version_check.outputs.should_deploy == 'true'
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        project_id: ${{ secrets.GCP_PROJECT_ID_PROD }}

    - name: Configure Docker to use gcloud as a credential helper
      if: steps.version_check.outputs.should_deploy == 'true'
      run: gcloud auth configure-docker

    - name: Build Docker image
      if: steps.version_check.outputs.should_deploy == 'true'
      run: |
        VERSION="${{ steps.version_check.outputs.version }}"
        docker build -t gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:$VERSION \
                     -t gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
                     -t gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:latest .

    - name: Push Docker image
      if: steps.version_check.outputs.should_deploy == 'true'
      run: |
        VERSION="${{ steps.version_check.outputs.version }}"
        docker push gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:$VERSION
        docker push gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run
      if: steps.version_check.outputs.should_deploy == 'true'
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $GCP_REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 2 \
          --min-instances 1 \
          --max-instances 20 \
          --set-env-vars NODE_ENV=production,ENVIRONMENT=production,NEXT_TELEMETRY_DISABLED=${{ vars.NEXT_TELEMETRY_DISABLED }},NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL_PROD }},NEXT_PUBLIC_WS_URL=${{ vars.NEXT_PUBLIC_WS_URL_PROD }},NEXT_PUBLIC_APP_NAME="${{ vars.NEXT_PUBLIC_APP_NAME_PROD }}"

    - name: Get service URL
      if: steps.version_check.outputs.should_deploy == 'true'
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $GCP_REGION --format="value(status.url)")
        VERSION="${{ steps.version_check.outputs.version }}"
        echo "üöÄ Frontend PRODU√á√ÉO deployed successfully!"
        echo "üì¶ Version: $VERSION"
        echo "üåê URL: $SERVICE_URL"

    - name: Skip deployment message
      if: steps.version_check.outputs.should_deploy == 'false'
      run: |
        echo "‚è≠Ô∏è Deploy pulado - Tag n√£o √© v√°lida para produ√ß√£o"
        echo "üí° Para deploy de produ√ß√£o, use:"
        echo "   pnpm run version:prod-patch  (cria tag X.X.X)"
        echo "   pnpm run version:prod-minor  (cria tag X.X.X)"
        echo "   pnpm run version:prod-major  (cria tag X.X.X)"
        echo ""
        echo "üè∑Ô∏è Tags de produ√ß√£o devem seguir formato X.Y.Z (sem sufixo)"
        echo "üîí Ambiente de produ√ß√£o requer permiss√µes especiais"
