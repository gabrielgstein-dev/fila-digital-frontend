name: Deploy Frontend to Cloud Run (Staging)

on:
  push:
    tags:
      - '*-stage'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        default: 'latest-stage'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_STAGE }}
  GCP_REGION: ${{ vars.GCP_REGION_STAGE }}
  SERVICE_NAME: ${{ vars.FRONTEND_SERVICE_NAME_STAGE }}
  # Ajuste isto conforme a LOCALIZA√á√ÉO do reposit√≥rio no Artifact Registry:
  # Se o repo estiver em 'us' => 'us-docker.pkg.dev'
  # Se estiver em 'us-central1' => 'us-central1-docker.pkg.dev'
  ARTIFACTS_HOST: us-docker.pkg.dev
  AR_REPO: fila-frontend
  IMAGE_NAME: fila-frontend
  # Nota: O servi√ßo de staging 'fila-frontend-stage' ser√° criado automaticamente no primeiro deploy

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version_check
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "Tag detectada: $TAG_NAME"
            if [[ "$TAG_NAME" == *"-stage" ]]; then
              echo "should_deploy=true" >> "$GITHUB_OUTPUT"
              echo "version=$TAG_NAME" >> "$GITHUB_OUTPUT"
            else
              echo "should_deploy=false" >> "$GITHUB_OUTPUT"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG_NAME="${{ github.event.inputs.tag }}"
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
            echo "version=$TAG_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "should_deploy=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Validate Service Account Key
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          echo "üîç Validando chave da conta de servi√ßo antes da autentica√ß√£o..."
          
          # Cria arquivo tempor√°rio com a chave do secret
          echo '${{ secrets.GCP_SA_KEY_STAGE }}' > temp_key.json
          
          # Verifica se o arquivo foi criado e tem conte√∫do
          if [ ! -s temp_key.json ]; then
            echo "‚ùå Secret GCP_SA_KEY_STAGE est√° vazio ou n√£o foi configurado"
            exit 1
          fi
          
          echo "‚úÖ Secret encontrado"
          
          # Verifica se √© um JSON v√°lido
          if ! jq -e '.' temp_key.json >/dev/null 2>&1; then
            echo "‚ùå Secret n√£o √© um JSON v√°lido"
            echo "üîç Primeiras linhas do secret:"
            head -3 temp_key.json
            exit 1
          fi
          
          # Extrai e valida campos obrigat√≥rios
          if ! jq -e -r '.type,.client_email,.private_key_id,.private_key' temp_key.json >/dev/null 2>&1; then
            echo "‚ùå Campos obrigat√≥rios n√£o encontrados no JSON"
            echo "üîç Campos dispon√≠veis:"
            jq -r 'keys[]' temp_key.json
            exit 1
          fi
          
          # Verifica o tipo da conta de servi√ßo
          SERVICE_TYPE=$(jq -r '.type' temp_key.json)
          if [ "$SERVICE_TYPE" != "service_account" ]; then
            echo "‚ùå Tipo incorreto: $SERVICE_TYPE (esperado: service_account)"
            exit 1
          fi
          
          echo "‚úÖ Tipo da conta: $SERVICE_TYPE"
          
          # Verifica o email da conta
          CLIENT_EMAIL=$(jq -r '.client_email' temp_key.json)
          echo "‚úÖ Email da conta: $CLIENT_EMAIL"
          
          # Verifica se a chave privada est√° presente
          PRIVATE_KEY=$(jq -r '.private_key' temp_key.json)
          if [ "$PRIVATE_KEY" = "null" ] || [ -z "$PRIVATE_KEY" ]; then
            echo "‚ùå Chave privada n√£o encontrada ou vazia"
            exit 1
          fi
          
          echo "‚úÖ Chave privada encontrada"
          
          # Verifica se a chave privada tem o formato correto
          if [[ ! "$PRIVATE_KEY" =~ ^-----BEGIN\ PRIVATE\ KEY----- ]]; then
            echo "‚ùå Chave privada n√£o est√° no formato PEM correto"
            echo "üîç In√≠cio da chave:"
            echo "$PRIVATE_KEY" | head -1
            exit 1
          fi
          
          if [[ ! "$PRIVATE_KEY" =~ -----END\ PRIVATE\ KEY-----$ ]]; then
            echo "‚ùå Chave privada n√£o termina corretamente"
            echo "üîç Fim da chave:"
            echo "$PRIVATE_KEY" | tail -1
            exit 1
          fi
          
          echo "‚úÖ Formato PEM da chave privada est√° correto"
          
          # Tenta extrair e validar a chave
          echo "$PRIVATE_KEY" > key.pem
          
          # Verifica se a chave pode ser lida pelo OpenSSL
          if ! openssl pkcs8 -in key.pem -nocrypt -topk8 -inform PEM -out /dev/null 2>/dev/null; then
            echo "‚ùå Chave privada n√£o pode ser lida pelo OpenSSL"
            echo "üîç Verificando formato da chave..."
            head -1 key.pem
            tail -1 key.pem
            exit 1
          fi
          
          echo "‚úÖ Chave privada validada com sucesso pelo OpenSSL"
          
          # Limpa arquivos tempor√°rios
          rm -f temp_key.json key.pem
          
          echo "üéâ Valida√ß√£o da chave conclu√≠da - pronta para autentica√ß√£o!"

      - name: Authenticate to Google Cloud
        if: steps.version_check.outputs.should_deploy == 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_STAGE }}

      - name: Setup Google Cloud CLI
        if: steps.version_check.outputs.should_deploy == 'true'
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Debug
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          echo "GCP_PROJECT_ID=$GCP_PROJECT_ID"
          echo "GCP_REGION=$GCP_REGION"
          echo "SERVICE_NAME=$SERVICE_NAME"
          echo "ARTIFACTS_HOST=$ARTIFACTS_HOST"
          gcloud config get-value project
          gcloud auth list
          # Liste reposit√≥rios na localiza√ß√£o compat√≠vel com ARTIFACTS_HOST
          gcloud artifacts repositories list --location=us || true
          gcloud artifacts repositories list --location=us-central1 || true

      - name: Configure Docker credential helper
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          gcloud auth configure-docker "$ARTIFACTS_HOST" --quiet

      - name: Build Docker image
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          VERSION="${{ steps.version_check.outputs.version }}"
          REG_PATH="${ARTIFACTS_HOST}/${GCP_PROJECT_ID}/${AR_REPO}/${IMAGE_NAME}"
          docker build \
            -t "${REG_PATH}:${VERSION}" \
            -t "${REG_PATH}:${GITHUB_SHA}" \
            -t "${REG_PATH}:latest" .

      - name: Push Docker image
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          VERSION="${{ steps.version_check.outputs.version }}"
          REG_PATH="${ARTIFACTS_HOST}/${GCP_PROJECT_ID}/${AR_REPO}/${IMAGE_NAME}"
          docker push "${REG_PATH}:${VERSION}"
          docker push "${REG_PATH}:${GITHUB_SHA}"
          docker push "${REG_PATH}:latest"

      - name: Deploy to Cloud Run
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          REG_PATH="${ARTIFACTS_HOST}/${GCP_PROJECT_ID}/${AR_REPO}/${IMAGE_NAME}"
          gcloud run deploy "$SERVICE_NAME" \
            --image "${REG_PATH}:${GITHUB_SHA}" \
            --region "$GCP_REGION" \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=${{ vars.NODE_ENV_STAGE }},NEXT_TELEMETRY_DISABLED=${{ vars.NEXT_TELEMETRY_DISABLED }},NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL_STAGE }},NEXT_PUBLIC_WS_URL=${{ vars.NEXT_PUBLIC_WS_URL_STAGE }},NEXT_PUBLIC_APP_NAME="${{ vars.NEXT_PUBLIC_APP_NAME_STAGE }}"

      - name: Get service URL
        if: steps.version_check.outputs.should_deploy == 'true'
        run: |
          SERVICE_URL=$(gcloud run services describe "$SERVICE_NAME" --region "$GCP_REGION" --format="value(status.url)")
          echo "üöÄ Frontend deployed"
          echo "üì¶ Version: ${{ steps.version_check.outputs.version }}"
          echo "üåê URL: $SERVICE_URL"

      - name: Skip deployment message
        if: steps.version_check.outputs.should_deploy == 'false'
        run: |
          echo "‚è≠Ô∏è Deploy pulado - Tag inv√°lida para staging (exige sufixo '-stage')."
